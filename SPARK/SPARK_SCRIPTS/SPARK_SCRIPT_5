from pyspark.sql import SQLContext

sqlContext= SQLContext(sc)

df2=sqlContext.read.json("/user/root/yelp_academic_dataset_business.json")

rev=sqlContext.read.json("/user/root/yelp_academic_dataset_review.json")

df2.registerTempTable("Business")
rev.registerTempTable("Reviews")

area_UWM= sqlContext.sql(" select business_id,satrs from business where where latitude> 42.931739 and latitude < 43.221261 and longitude >-89.610310 and longitude < -89214450")

sorted_business_UWM=area_UWM.sort(area_UWM.stars.desc())
top10_UWM= sorted_business_UWM.limit(10)
top10_UWM.registerTempTable("top10")
reverse_sorted_business=area_UWM.sort(srea_UWM.stars.asc())
bottom10_UWM= reverse_sorted_business.limit(10)
bottom10_UWM.registerTempTable("bottom10")
rev_month=rev.select(pyspark.sql.functions.year(rev.date).alias(‘year’), pyspark.sql.functions.month(rev.date).alias(‘month’),rev.business_id,rev.stars)

rev_month.registerTempTable("Review_month")

TOP_10_business= ("select AVG(Review_month.stars) as average_no_of_stars, Review_month.business_id, Review_month.year, Review_month.month from Review_month, top10 where Review_month.business_id=top10. Review_month group by Review_month.business_id, year, month ")


BOTTOM_10_business= ("select AVG(Review_month.stars) as average_no_of_stars, Review_month.business_id, Review_month.year, Review_month.month from Review_month, bottom10 where Review_month.business_id=bottom10. Review_month group by Review_month.business_id, year, month ")

TOP_10_business.write.mode(‘append’).json("/user/root/output_spark_top10.json")

BOTTOM_10_business.write.mode(‘append’).json("/user/root/output_spark_bottom10.json")
